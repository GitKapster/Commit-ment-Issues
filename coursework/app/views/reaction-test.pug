extends layout

block content
  style.
    .reaction-game-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 20px;
      color: white;
    }

    .reaction-button {
      padding: 20px 40px;
      background-color: #8BC34A;
      color: white;
      border: none;
      font-size: 24px;
      cursor: pointer;
      border-radius: 8px;
      transition: background-color 0.3s;
    }

    .reaction-button:active {
      background-color: #6A8A3F;
    }

    .reaction-button.disabled {
      background-color: #ccc;
      cursor: not-allowed;
    }

    .game-info {
      margin-bottom: 20px;
      font-size: 18px;
    }

    .timer {
      font-size: 20px;
      margin-bottom: 10px;
    }

    .game-stats {
      margin-top: 20px;
      font-size: 18px;
    }

    .score-display {
      font-size: 24px;
      margin-bottom: 15px;
      color: #FFD700;
      font-weight: bold;
    }

  .reaction-game-container
    h1 Reaction Test - #{difficulty.toUpperCase()}
    .score-display Score: #[span#score]
    .timer Time: #[span#time 0]s
    .game-info#gameInfo Get ready! Wait for the button to change color...
    .reaction-button#reactionButton Click me when it turns green!
    .game-stats#gameStats Moves: #[span#moves 0]

  script.
    let gameState = {
      score: 0,
      moves: 0,
      timeLimit: 0,
      reactionTime: 0,
      startTime: null,
      reactionButton: null
    };

    document.addEventListener('DOMContentLoaded', () => {
        const difficulty = '#{difficulty}';
        let reactionButton = document.getElementById('reactionButton');
        gameState.reactionButton = reactionButton;
        
        // Set up difficulty-based settings
        switch (difficulty) {
            case 'easy':
                gameState.timeLimit = 5; // seconds
                break;
            case 'medium':
                gameState.timeLimit = 4; // seconds
                break;
            case 'hard':
                gameState.timeLimit = 3; // seconds
                break;
            default:
                gameState.timeLimit = 5; // Default
        }
        
        // Initialize game state
        startReactionTest();
    });

    function startReactionTest() {
        document.getElementById('gameInfo').textContent = 'Get ready! Wait for the button to turn green...';
        document.getElementById('score').textContent = gameState.score;
        document.getElementById('moves').textContent = gameState.moves;

        gameState.reactionButton.classList.add('disabled');
        gameState.reactionButton.textContent = 'Wait...';

        // Wait for a random time between 1 and 5 seconds before changing the button color
        const randomWaitTime = Math.floor(Math.random() * 5000) + 1000;

        setTimeout(() => {
            // Change button to green
            gameState.reactionButton.classList.remove('disabled');
            gameState.reactionButton.style.backgroundColor = '#4CAF50';
            gameState.reactionButton.textContent = 'Click me now!';
            gameState.startTime = new Date(); // Start timing
            document.getElementById('gameInfo').textContent = 'Click when the button turns green!';
        }, randomWaitTime);
        
        // Start the countdown timer for time limit
        startTimer();
    }

    function startTimer() {
        let elapsedTime = 0;
        const timerInterval = setInterval(() => {
            elapsedTime++;
            document.getElementById('time').textContent = elapsedTime;
            
            if (elapsedTime >= gameState.timeLimit) {
                clearInterval(timerInterval);
                endGame('Time is up!');
            }
        }, 1000);
    }

    function handleButtonClick() {
        if (gameState.reactionButton.classList.contains('disabled')) {
            return; // Ignore click if button isn't green
        }
        
        const reactionTime = new Date() - gameState.startTime;
        gameState.reactionTime = reactionTime;
        gameState.moves++;

        document.getElementById('moves').textContent = gameState.moves;
        gameState.score = Math.max(0, Math.floor(1000 - reactionTime / 10)); // Scoring logic

        document.getElementById('score').textContent = gameState.score;

        document.getElementById('gameInfo').textContent = `Your reaction time: ${reactionTime}ms`;

        // After clicking, wait for a moment before restarting the game
        setTimeout(() => {
            startReactionTest();
        }, 2000);
    }

    document.getElementById('reactionButton').addEventListener('click', handleButtonClick);

