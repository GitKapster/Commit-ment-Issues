//- views/memory-test.pug
extends layout

block content
  style.
    .memory-game-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 20px;
      color: white;
    }
    
    .cards-grid {
      display: grid;
      gap: 15px;
      margin: 30px 0;
      perspective: 1000px;
    }
    
    .card {
      width: 100px;
      height: 100px;
      position: relative;
      transform-style: preserve-3d;
      transition: transform 0.5s;
      cursor: pointer;
      border-radius: 8px;
    }
    
    .card-face {
      position: absolute;
      width: 100%;
      height: 100%;
      backface-visibility: hidden;
      display: flex;
      justify-content: center;
      align-items: center;
      border-radius: 8px;
      font-size: 36px;
    }
    
    .card-front {
      background: #555;
      color: transparent;
    }
    
    .card-back {
      background: #f9f9f9;
      color: #333;
      transform: rotateY(180deg);
    }
    
    .card.flipped {
      transform: rotateY(180deg);
    }
    
    .card.matched .card-back {
      background: #8BC34A;
    }
    
    .game-info {
      margin-bottom: 20px;
      font-size: 18px;
    }
    
    .timer {
      font-size: 20px;
      margin-bottom: 10px;
    }
    
    .game-stats {
      margin-top: 20px;
      font-size: 18px;
    }
    
    .score-display {
      font-size: 24px;
      margin-bottom: 15px;
      color: #FFD700;
      font-weight: bold;
    }

  .memory-game-container
    h1 Memory Test - #{difficulty.toUpperCase()}
    .score-display Score: #[span#score]
    .timer Time: #[span#time 0]s
    .game-info#gameInfo Memorize the cards! They'll flip back in 3 seconds...
    .cards-grid#cardsGrid
    .game-stats#gameStats

  script.
    const symbols = ['★', '☀', '♫', '☂', '♠', '♥', '♦', '♣', '☎', '✈', '☯', '⚓'];
    const difficulty = '#{difficulty}';
    const gameState = {
        cards: [],
        flippedCards: [],
        matchedPairs: 0,
        canFlip: false,
        startTime: null,
        timerInterval: null,
        moves: 0,
        currentScore: 0,
        baseScore: 0,
        timeLimit: 0
    };
    
    document.addEventListener('DOMContentLoaded', () => {
        let rows = 2;
        let cols;
        
        // Set grid size and scoring parameters based on difficulty
        switch(difficulty) {
            case 'easy':
                cols = 3;
                gameState.baseScore = 600;
                gameState.timeLimit = 6; // seconds
                break;
            case 'medium':
                cols = 4;
                gameState.baseScore = 800;
                gameState.timeLimit = 8; // seconds
                break;
            case 'hard':
                cols = 5;
                gameState.baseScore = 1000;
                gameState.timeLimit = 10; // seconds
                break;
            default:
                cols = 3;
                gameState.baseScore = 600;
                gameState.timeLimit = 15; // seconds
        }
        
        gameState.currentScore = gameState.baseScore;
        
        initGame(rows, cols);
    });
    
    function initGame(rows, cols) {
        const totalCards = rows * cols;
        const minMoves = (totalCards / 2); // Minimum possible moves (perfect play)
        const cardsGrid = document.getElementById('cardsGrid');
        
        // Clear previous game
        cardsGrid.innerHTML = '';
        gameState.cards = [];
        gameState.flippedCards = [];
        gameState.matchedPairs = 0;
        gameState.canFlip = false;
        gameState.moves = 0;
        gameState.currentScore = gameState.baseScore;
        document.getElementById('time').textContent = '0';
        
        // Update score display
        document.getElementById('score').textContent = gameState.currentScore;
        
        // Set grid style
        cardsGrid.style.gridTemplateColumns = `repeat(${cols}, 100px)`;
        
        // Create pairs of symbols
        const pairsNeeded = totalCards / 2;
        const selectedSymbols = symbols.slice(0, pairsNeeded);
        const cardValues = [...selectedSymbols, ...selectedSymbols];
        
        // Shuffle the cards
        shuffleArray(cardValues);
        
        // Create card elements
        cardValues.forEach((value, index) => {
            const card = document.createElement('div');
            card.className = 'card';
            card.dataset.index = index;
            
            const cardFront = document.createElement('div');
            cardFront.className = 'card-face card-front';
            
            const cardBack = document.createElement('div');
            cardBack.className = 'card-face card-back';
            cardBack.textContent = value;
            
            card.appendChild(cardFront);
            card.appendChild(cardBack);
            
            card.addEventListener('click', () => handleCardClick(card));
            
            cardsGrid.appendChild(card);
            gameState.cards.push({
                element: card,
                value: value,
                isFlipped: false,
                isMatched: false
            });
        });
        
        // Show cards for memorization
        flipAllCards(true);
        
        // Update game info with time limit
        document.getElementById('gameInfo').textContent = `Memorize the cards! They'll flip back in 3 seconds... Time limit: ${gameState.timeLimit} seconds`;
        
        // Start timer for memorization
        setTimeout(() => {
            flipAllCards(false);
            gameState.canFlip = true;
            document.getElementById('gameInfo').textContent = `Find all matching pairs! Time limit: ${gameState.timeLimit} seconds`;
            startTimer();
            updateStats();
        }, 3000);
    }
    
    function handleCardClick(card) {
        if (!gameState.canFlip) return;
        
        const index = parseInt(card.dataset.index);
        const cardState = gameState.cards[index];
        const totalCards = gameState.cards.length;
        const minMoves = totalCards / 2; // Minimum possible moves (perfect play)
        
        // Don't allow flipping if already flipped or matched
        if (cardState.isFlipped || cardState.isMatched) return;
        
        // Flip the card
        flipCard(cardState, true);
        gameState.flippedCards.push(cardState);
        gameState.moves++;
        
        // Calculate score - deduct points for extra moves
        if (gameState.moves + 1 > minMoves) {
            // Only deduct points for moves beyond the minimum
            const movesPenalty = Math.floor((gameState.moves - minMoves) / 2) * 25;
            gameState.currentScore = Math.max(0, gameState.baseScore - movesPenalty);
            
            // Also apply time penalty if over time limit
            const currentTime = new Date();
            const elapsedSeconds = Math.floor((currentTime - gameState.startTime) / 1000);
            if (elapsedSeconds > gameState.timeLimit) {
                const timePenalty = (elapsedSeconds - gameState.timeLimit) * 10;
                gameState.currentScore = Math.max(0, gameState.currentScore - timePenalty);
            }
            
            // Update score display
            document.getElementById('score').textContent = gameState.currentScore;
        }
        
        updateStats();
        
        // Check for match if two cards are flipped
        if (gameState.flippedCards.length === 2) {
            gameState.canFlip = false;
            
            if (gameState.flippedCards[0].value === gameState.flippedCards[1].value) {
                // Match found
                gameState.flippedCards.forEach(card => {
                    card.isMatched = true;
                    card.element.classList.add('matched');
                });
                gameState.matchedPairs++;
                gameState.flippedCards = [];
                gameState.canFlip = true;
                
                // Check if game is complete
                if (gameState.matchedPairs === gameState.cards.length / 2) {
                    endGame();
                }
            } else {
                // No match, flip back after delay
                setTimeout(() => {
                    gameState.flippedCards.forEach(card => flipCard(card, false));
                    gameState.flippedCards = [];
                    gameState.canFlip = true;
                }, 1000);
            }
        }
    }
    
    function flipCard(cardState, isFlipped) {
        cardState.isFlipped = isFlipped;
        cardState.element.classList.toggle('flipped', isFlipped);
    }
    
    function flipAllCards(show) {
        gameState.cards.forEach(card => {
            flipCard(card, show);
        });
    }
    
    function updateStats() {
        document.getElementById('gameStats').textContent = 
            `Moves: ${gameState.moves} | Matched: ${gameState.matchedPairs}/${gameState.cards.length/2}`;
    }
    
    function startTimer() {
        gameState.startTime = new Date();
        gameState.timerInterval = setInterval(() => {
            updateTimer();
            
            // Apply time penalty when over time limit
            const currentTime = new Date();
            const elapsedSeconds = Math.floor((currentTime - gameState.startTime) / 1000);
            
            if (elapsedSeconds > gameState.timeLimit && gameState.canFlip) {
                const totalCards = gameState.cards.length;
                const minMoves = totalCards / 2;
                const movesPenalty = Math.floor(Math.max(0, gameState.moves - minMoves) / 2) * 25;
                const timePenalty = (elapsedSeconds - gameState.timeLimit) * 10;
                
                gameState.currentScore = Math.max(0, gameState.baseScore - movesPenalty - timePenalty);
                document.getElementById('score').textContent = gameState.currentScore;
            }
        }, 1000);
    }
    
    function updateTimer() {
        const currentTime = new Date();
        const elapsedSeconds = Math.floor((currentTime - gameState.startTime) / 1000);
        document.getElementById('time').textContent = elapsedSeconds;
    }
    
    function endGame() {
        clearInterval(gameState.timerInterval);
        const finalTime = parseInt(document.getElementById('time').textContent);
        gameState.canFlip = false;
        
        // Calculate final score
        const totalCards = gameState.cards.length;
        const minMoves = totalCards / 2;
        
        let timePenalty = 0;
        if (finalTime > gameState.timeLimit) {
            timePenalty = (finalTime - gameState.timeLimit) * 10;
        }
        
        const movesPenalty = Math.floor(Math.max(0, gameState.moves - minMoves) / 2) * 25;
        gameState.currentScore = Math.max(0, gameState.baseScore - movesPenalty - timePenalty);
        
        // Update score display
        document.getElementById('score').textContent = gameState.currentScore;
        
        document.getElementById('gameInfo').textContent = 
            `Congratulations! You completed the game in ${finalTime} seconds with ${gameState.moves} moves!`;
        document.getElementById('gameStats').textContent = 
            `Final Score: ${gameState.currentScore} points (Base: ${gameState.baseScore}, Move penalty: -${movesPenalty}, Time penalty: -${timePenalty})`;
    }
    
    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
    }