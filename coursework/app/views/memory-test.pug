extends layout 


html
  head
    title Memory Test Game
    style.
      body {
        font-family: Arial, sans-serif;
        background-color: #3f3f3f;
        color: white;
        text-align: center;
        margin: 0;
        padding: 20px;
      }
      
      .difficulty-selector {
        margin: 20px 0;
      }
      
      .difficulty-btn {
        padding: 10px 20px;
        margin: 0 10px;
        font-size: 16px;
        cursor: pointer;
        border: none;
        border-radius: 5px;
        font-weight: bold;
      }
      
      .easy { background-color: #8BC34A; }
      .medium { background-color: #FFC107; }
      .hard { background-color: #F44336; }
      
      .game-container {
        display: none;
        flex-direction: column;
        align-items: center;
        margin-top: 20px;
      }
      
      .cards-grid {
        display: grid;
        gap: 15px;
        margin: 30px 0;
        perspective: 1000px;
      }
      
      .card {
        width: 100px;
        height: 100px;
        position: relative;
        transform-style: preserve-3d;
        transition: transform 0.5s;
        cursor: pointer;
        border-radius: 8px;
      }
      
      .card-face {
        position: absolute;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 8px;
        font-size: 36px;
      }
      
      .card-front {
        background: #555;
        color: transparent;
      }
      
      .card-back {
        background: #f9f9f9;
        color: #333;
        transform: rotateY(180deg);
      }
      
      .card.flipped {
        transform: rotateY(180deg);
      }
      
      .card.matched .card-back {
        background: #8BC34A;
      }
      
      .game-info {
        margin-bottom: 20px;
        font-size: 18px;
      }
      
      .timer {
        font-size: 20px;
        margin-bottom: 10px;
      }
      
      .game-stats {
        margin-top: 20px;
        font-size: 18px;
      }
      
      .back-button {
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #555;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
      }
      
      .back-button:hover {
        background-color: #4d4c4c;
      }

block content
  h1 Memory Test
  
  style.
    body {
      font-family: Arial, sans-serif;
      flex-direction: column;
      align-items: center;
      background-color: #f0f0f0;
      margin: 0;
    }

    script.
      const symbols = ['★', '☀', '♫', '☂', '♠', '♥', '♦', '♣', '☎', '✈', '☯', '⚓'];
      const gameState = {
          difficulty: null,
          cards: [],
          flippedCards: [],
          matchedPairs: 0,
          canFlip: false,
          startTime: null,
          timerInterval: null,
          moves: 0
      };
      
      function startGame(difficulty) {
          gameState.difficulty = difficulty;
          document.querySelector('.difficulty-selector').style.display = 'none';
          document.getElementById('gameContainer').style.display = 'flex';
          
          let rows, cols;
          
          switch(difficulty) {
              case 'easy':
                  rows = 2;
                  cols = 3;
                  break;
              case 'medium':
                  rows = 2;
                  cols = 4;
                  break;
              case 'hard':
                  rows = 2;
                  cols = 5;
                  break;
          }
          
          initGame(rows, cols);
      }
      
      function resetGame() {
          clearInterval(gameState.timerInterval);
          document.querySelector('.difficulty-selector').style.display = 'block';
          document.getElementById('gameContainer').style.display = 'none';
      }
      
      function initGame(rows, cols) {
          const totalCards = rows * cols;
          const cardsGrid = document.getElementById('cardsGrid');
          cardsGrid.innerHTML = '';
          
          gameState.cards = [];
          gameState.flippedCards = [];
          gameState.matchedPairs = 0;
          gameState.canFlip = false;
          gameState.moves = 0;
          document.getElementById('time').textContent = '0';
          
          // Set grid style
          cardsGrid.style.gridTemplateColumns = `repeat(${cols}, 100px)`;
          
          // Create pairs of symbols
          const pairsNeeded = totalCards / 2;
          const selectedSymbols = symbols.slice(0, pairsNeeded);
          const cardValues = [...selectedSymbols, ...selectedSymbols];
          
          // Shuffle the cards
          shuffleArray(cardValues);
          
          // Create card elements
          cardValues.forEach((value, index) => {
              const card = document.createElement('div');
              card.className = 'card';
              card.dataset.index = index;
              
              const cardFront = document.createElement('div');
              cardFront.className = 'card-face card-front';
              
              const cardBack = document.createElement('div');
              cardBack.className = 'card-face card-back';
              cardBack.textContent = value;
              
              card.appendChild(cardFront);
              card.appendChild(cardBack);
              
              card.addEventListener('click', () => handleCardClick(card));
              
              cardsGrid.appendChild(card);
              gameState.cards.push({
                  element: card,
                  value: value,
                  isFlipped: false,
                  isMatched: false
              });
          });
          
          // Show cards for memorization
          flipAllCards(true);
          
          // Start timer for memorization
          setTimeout(() => {
              flipAllCards(false);
              gameState.canFlip = true;
              document.getElementById('gameInfo').textContent = "Find all matching pairs!";
              startTimer();
              updateStats();
          }, 3000);
      }
      
      function handleCardClick(card) {
          if (!gameState.canFlip) return;
          
          const index = parseInt(card.dataset.index);
          const cardState = gameState.cards[index];
          
          // Don't allow flipping if already flipped or matched
          if (cardState.isFlipped || cardState.isMatched) return;
          
          // Flip the card
          flipCard(cardState, true);
          gameState.flippedCards.push(cardState);
          gameState.moves++;
          updateStats();
          
          // Check for match if two cards are flipped
          if (gameState.flippedCards.length === 2) {
              gameState.canFlip = false;
              
              if (gameState.flippedCards[0].value === gameState.flippedCards[1].value) {
                  // Match found
                  gameState.flippedCards.forEach(card => {
                      card.isMatched = true;
                      card.element.classList.add('matched');
                  });
                  gameState.matchedPairs++;
                  gameState.flippedCards = [];
                  gameState.canFlip = true;
                  
                  // Check if game is complete
                  if (gameState.matchedPairs === gameState.cards.length / 2) {
                      endGame();
                  }
              } else {
                  // No match, flip back after delay
                  setTimeout(() => {
                      gameState.flippedCards.forEach(card => flipCard(card, false));
                      gameState.flippedCards = [];
                      gameState.canFlip = true;
                  }, 1000);
              }
          }
      }
      
      function flipCard(cardState, isFlipped) {
          cardState.isFlipped = isFlipped;
          cardState.element.classList.toggle('flipped', isFlipped);
      }
      
      function flipAllCards(show) {
          gameState.cards.forEach(card => {
              flipCard(card, show);
          });
      }
      
      function updateStats() {
          document.getElementById('gameStats').textContent = 
              `Moves: ${gameState.moves} | Matched: ${gameState.matchedPairs}/${gameState.cards.length/2}`;
      }
      
      function startTimer() {
          gameState.startTime = new Date();
          gameState.timerInterval = setInterval(updateTimer, 1000);
      }
      
      function updateTimer() {
          const currentTime = new Date();
          const elapsedSeconds = Math.floor((currentTime - gameState.startTime) / 1000);
          document.getElementById('time').textContent = elapsedSeconds;
      }
      
      function endGame() {
          clearInterval(gameState.timerInterval);
          const finalTime = document.getElementById('time').textContent;
          document.getElementById('gameInfo').textContent = 
              `Congratulations! You completed the game in ${finalTime} seconds with ${gameState.moves} moves!`;
          gameState.canFlip = false;
      }
      
      function shuffleArray(array) {
          for (let i = array.length - 1; i > 0; i--) {
              const j = Math.floor(Math.random() * (i + 1));
              [array[i], array[j]] = [array[j], array[i]];
          }
      }