extends layout

block content
  head
    title Leaderboard
    style.
      body {
        font-family: Arial, sans-serif;
        background: #3f3f3f;
        color: white;
        text-align: center;
        margin: 0;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
      }
      .container {
        width: 80%;
        max-width: 1000px;
        background: #5dc5c1;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 16, 66, 0.1);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 0 auto;
      }
      .title {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
      }
      .filter-buttons {
        margin-bottom: 20px;
      }
      .filter-buttons button {
        background: #3b8686;
        color: white;
        border: none;
        padding: 10px 15px;
        margin: 5px;
        cursor: pointer;
        border-radius: 5px;
        font-weight: bold;
      }
      .filter-buttons button:hover {
        background: #276d6d;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        margin-bottom: 20px;
        text-align: left;
      }
      th, td {
        padding: 10px;
        border-bottom: 1px solid #444;
      }
      th {
        background: #3b8686;
        color: white;
      }
      tr:nth-child(even) {
        background: #69c8c6;
      }
      tr:nth-child(odd) {
        background: #5dc5c1;
      }

  body
    .container
      .title Leaderboard

      // Filter buttons
      .filter-buttons
        button(onclick="filterLeaderboard('all')") Show All
        button(onclick="filterLeaderboard('Aim')") Aim Leaderboard
        button(onclick="filterLeaderboard('Memory')") Memory Leaderboard
        button(onclick="filterLeaderboard('Reaction')") Reaction Leaderboard

      // Leaderboard table
      table
        thead
          tr
            th Rank
            th Username
            th Score
            th Game
        tbody
          each player, index in players
            tr(data-game=player.TaskType class=player.TaskType)
              td 
                span.rank #{index + 1}  // Dynamic ranking
              td #{player.Username}
              td #{player.Score}
              td #{player.TaskType} 

      // Button to add test data
      button(onclick="addPlayer('NewPlayer', Math.floor(Math.random() * 300), 'Aim')") Add Random Player

    script.
      function updateLeaderboard() {
        const rows = document.querySelectorAll("tbody tr");
        let currentFilter = document.querySelector(".filter-buttons button.active")?.dataset.filter || "all";
        filterLeaderboard(currentFilter);
      }

      function filterLeaderboard(game) {
        const rows = document.querySelectorAll("tbody tr");
        let visibleIndex = 0;

        rows.forEach(row => {
          if (game === "all" || row.classList.contains(game)) {
            row.style.display = "table-row";
            row.querySelector(".rank").textContent = ++visibleIndex;
          } else {
            row.style.display = "none";
          }
        });
      }

      function addPlayer(username, score, gameType) {
        const tbody = document.querySelector("tbody");
        const newRow = document.createElement("tr");
        newRow.classList.add(gameType);
        newRow.innerHTML = `
          <td><span class="rank"></span></td>
          <td>${username}</td>
          <td>${score}</td>
          <td>${gameType}</td>
        `;
        tbody.appendChild(newRow);
        updateLeaderboard(); // Update ranking after adding data
      }
