extends layout

block content
  head
    title Leaderboard
    style.
      body {
        font-family: Arial, sans-serif;
        background: #3f3f3f;
        color: white;
        text-align: center;
        margin: 0;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
      }
      .container {
        width: 80%;
        max-width: 1000px;
        background: #5dc5c1;
        padding: 20px;
        padding-top: 40px; /* Added extra padding to avoid title being covered */
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 16, 66, 0.1);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 0 auto;
      }
      .title {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
        margin-top: 20px; /* Added extra margin to push it down */
      }
      .filter-buttons {
        margin-bottom: 20px;
      }
      .filter-buttons button {
        background: #3b8686;
        color: white;
        border: none;
        padding: 10px 15px;
        margin: 5px;
        cursor: pointer;
        border-radius: 5px;
        font-weight: bold;
      }
      .filter-buttons button:hover {
        background: #276d6d;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        margin-bottom: 20px;
        text-align: left;
      }
      th, td {
        padding: 10px;
        border-bottom: 1px solid #444;
      }
      th {
        background: #3b8686;
        color: white;
      }
      tr:nth-child(even) {
        background: #69c8c6;
      }
      tr:nth-child(odd) {
        background: #5dc5c1;
      }

  body
    .container
      .title Leaderboard

      // Filter buttons
      .filter-buttons
        button(onclick="filterLeaderboard('all')") Show All
        button(onclick="filterLeaderboard('Aim')") Aim Leaderboard
        button(onclick="filterLeaderboard('Memory')") Memory Leaderboard
        button(onclick="filterLeaderboard('Reaction')") Reaction Leaderboard

      // Leaderboard table
      table
        thead
          tr
            th Rank
            th Username
            th Score
            th Game
        tbody
          each player, index in players
            tr(data-game=player.TaskType class=player.TaskType)
              td 
                span.rank #{index + 1}  // Dynamic ranking
              td #{player.Username}
              td #{player.Score}
              td #{player.TaskType} 

    script.
      function updateLeaderboard() {
        const rows = document.querySelectorAll("tbody tr");
        let currentFilter = document.querySelector(".filter-buttons button.active")?.dataset.filter || "all";
        filterLeaderboard(currentFilter);
      }

      function filterLeaderboard(game) {
        const rows = document.querySelectorAll("tbody tr");
        let visibleIndex = 0;

        rows.forEach(row => {
          if (game === "all" || row.classList.contains(game)) {
            row.style.display = "table-row";
            row.querySelector(".rank").textContent = ++visibleIndex;
          } else {
            row.style.display = "none";
          }
        });
      }

      // Fetch new leaderboard data periodically (if using API)
      function fetchLeaderboard() {
        fetch('/api/leaderboard') // Replace with your actual API endpoint
          .then(response => response.json())
          .then(data => {
            const tbody = document.querySelector("tbody");
            tbody.innerHTML = ""; // Clear existing rows

            data.forEach((player, index) => {
              const newRow = document.createElement("tr");
              newRow.classList.add(player.TaskType);
              newRow.innerHTML = `
                <td><span class="rank">${index + 1}</span></td>
                <td>${player.Username}</td>
                <td>${player.Score}</td>
                <td>${player.TaskType}</td>
              `;
              tbody.appendChild(newRow);
            });

            updateLeaderboard();
          })
          .catch(error => console.error("Error fetching leaderboard:", error));
      }

      // Auto-refresh leaderboard every 5 seconds (optional)
      setInterval(fetchLeaderboard, 5000);

      // Fetch data when the page loads
      fetchLeaderboard();